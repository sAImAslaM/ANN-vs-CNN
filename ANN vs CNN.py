# -*- coding: utf-8 -*-
"""i190461_A2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CFDf03esgtgApputzRsigHWd1gziQmOJ
"""

#@title Importing Libraries
import tensorflow as tf
from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt
import numpy as np

#@title Getting Dataset

# Checking DataSet
(X_train, y_train), (X_test, y_test) = datasets.cifar10.load_data()
X_train.shape
X_test.shape
y_train.shape
# Checking degree of array
print(y_train[:3])
print()
print(y_test[:3])
# Converting to 1-D Array
print("After Converting to 1-D Array:")
y_test = y_test.reshape(-1,)
y_train = y_train.reshape(-1,)
print(y_train[:3])
print(y_test[:3])

#@title Manipulating Dataset

#Defining Classes
classes = ["airplane","automobile","bird","cat","deer","dog","frog","horse","ship","truck"]
#Normalizing Datset
X_train = X_train / 255.0
X_test = X_test / 255.0

#@title Artificial Neural Network

#Building ANN
simple_network = models.Sequential([
        layers.Flatten(input_shape=(32,32,3)),
        layers.Dense(3000, activation='relu'),
        layers.Dense(1000, activation='relu'),
        layers.Dense(10, activation='softmax')    
    ])

simple_network.compile(optimizer='SGD',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

simple_network.fit(X_train, y_train, epochs=3)

"""At the end of neural network iterations, it has achieved an approx 46% accuracy score."""

#@title Convolutional Neural Network

#CNN
convolutional_network = models.Sequential([
    layers.Conv2D(filters=32, kernel_size=(3, 3), activation='relu', input_shape=(32, 32, 3)),
    layers.MaxPooling2D((2, 2)),

    layers.Conv2D(filters=64, kernel_size=(3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),

    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(10, activation='softmax')
])

convolutional_network.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

convolutional_network.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

convolutional_network.fit(X_train, y_train, epochs=6)

"""At the end of Convolutional Neural Network iterations, it has achieved an approx 74% accuracy score.
Which alone endorses the fact that CNN is a better fit than ANN for Image classification. Secondly computation has also been reduced greatly because of maxpooling. 
"""

#@title ANN Classification Report

from sklearn.metrics import confusion_matrix , classification_report
import numpy as np
y_pred = simple_network.predict(X_test)
y_pred_classes = [np.argmax(element) for element in y_pred]

print("Classification Report: \n", classification_report(y_test, y_pred_classes))

#@title CNN Classification Report

from sklearn.metrics import confusion_matrix , classification_report
import numpy as np
y_pred = convolutional_network.predict(X_test)
y_pred_classes = [np.argmax(element) for element in y_pred]

print("Classification Report: \n", classification_report(y_test, y_pred_classes))